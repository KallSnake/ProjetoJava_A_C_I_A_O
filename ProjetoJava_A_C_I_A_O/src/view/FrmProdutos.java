package view;

import controller.ConexaoDB;
import controller.ControllerProdutos;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import model.ModelProdutos;
import model.ModelTabela;
import validation.ValidationCampoPrecoProdutos;
import validation.ValidationCampoQuantidadeProdutos;

/**
 *
 * @author Luis Carlos O.
 */
public class FrmProdutos extends javax.swing.JFrame {
    
    ConexaoDB conectaProduto = new ConexaoDB();
    // ConexaoDB conectaTipo = new ConexaoDB();
    ConexaoDB conectaCategoriaProdutos = new ConexaoDB();
    ConexaoDB conectaEventos = new ConexaoDB();
    ControllerProdutos controlProdutos = new ControllerProdutos();
    ModelProdutos mprodutos = new ModelProdutos();
    FrmCategoriaProdutos frmCatProd;
    FrmEventos frmEvent;
    int flag = 0;
    
    String nomeEvento;
    String nomeCategoria;
    

    /**
     * Creates new form FrmProdutos
     */
    public FrmProdutos() {
        initComponents();

        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/imagens/ss.jpg")).getImage());
        
        // FAZ COM QUE O CAMPO SO ACEITE NUMEROS TANTO EM CAMPO DE TEXTO E CAMPO FORMATADO
        txtQtdProduto.setDocument(new ValidationCampoQuantidadeProdutos());
        
        txtPrecoProduto.setDocument(new ValidationCampoPrecoProdutos());
        
        
        /*
        // CRIAR MASCARA PARA O CAMPO QTD DE PRDOUTOS
        try {

            // ELEMENTO QUE CRIA O FORMATO DA MASCARA
            MaskFormatter formQTDProd = new MaskFormatter("#####");

            // ATRIBUI A MASCARA AO CAMPO CEP
            txtQtdProduto.setFormatterFactory(new DefaultFormatterFactory(formQTDProd));

        } catch (ParseException ex) {

            JOptionPane.showMessageDialog(rootPane, "Erro na máscara do campo quantidade de produtos \n ERROR: " + ex);

        }
        */
        
        
        
        // preencherComboTipoProduto();
        preencherComboCategoriaProduto();
        preencherComboNomeEvento();
        
        
        preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
        
       
 
       // preencherTabelaProduto("SELECT PRODUTOS.COD_PROD,PRODUTOS.DESC_PROD,PRODUTOS.QTD_PROD,PRODUTOS.UNID_PROD,PRODUTOS.PRECO_PROD,TIPO_PRODUTOS.NOME_TIPO,CATEGORIA_PRODUTOS.NOME_CATPROD,EVENTOS.NOME_EVENTO FROM PRODUTOS INNER JOIN TIPO_PRODUTOS ON PRODUTOS.COD_PROD = TIPO_PRODUTOS.COD_TIPO INNER JOIN CATEGORIA_PRODUTOS ON CATEGORIA_PRODUTOS.COD_CATPROD = PRODUTOS.COD_PROD INNER JOIN EVENTOS ON EVENTOS.COD_EVENTO = PRODUTOS.COD_PROD ORDER BY PRODUTOS.COD_PROD");
        
   
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnAlterarProduto = new javax.swing.JButton();
        btnNovoProduto = new javax.swing.JButton();
        btnSalvarProduto = new javax.swing.JButton();
        btnExcluirProduto = new javax.swing.JButton();
        btnCancelarProduto = new javax.swing.JButton();
        btnSairProduto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNomeProduto = new javax.swing.JTextField();
        jComboBoxTipoProduto = new javax.swing.JComboBox<>();
        jComboBoxCategoriaProduto = new javax.swing.JComboBox<>();
        txtPrecoProduto = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProduto = new javax.swing.JTable();
        jComboBoxNomeDoEvento = new javax.swing.JComboBox<>();
        jComboBoxUnidProduto = new javax.swing.JComboBox<>();
        btnPesquisarProduto = new javax.swing.JButton();
        txtCampoPesquisaProduto = new javax.swing.JTextField();
        txtCodProduto = new javax.swing.JTextField();
        btnAdicionarCatProd = new javax.swing.JButton();
        btnAdicionarEvento = new javax.swing.JButton();
        txtQtdProduto = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Produtos");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true), "Opções", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        btnAlterarProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAlterarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons8-suporte-50.png"))); // NOI18N
        btnAlterarProduto.setToolTipText("Alterar");
        btnAlterarProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAlterarProduto.setEnabled(false);
        btnAlterarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarProdutoActionPerformed(evt);
            }
        });

        btnNovoProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNovoProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons8-adicionar-50.png"))); // NOI18N
        btnNovoProduto.setToolTipText("Adicionar");
        btnNovoProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNovoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoProdutoActionPerformed(evt);
            }
        });

        btnSalvarProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSalvarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons8-salvar-50.png"))); // NOI18N
        btnSalvarProduto.setToolTipText("Salvar");
        btnSalvarProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalvarProduto.setEnabled(false);
        btnSalvarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarProdutoActionPerformed(evt);
            }
        });

        btnExcluirProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnExcluirProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons8-lixo-50.png"))); // NOI18N
        btnExcluirProduto.setToolTipText("Excluir");
        btnExcluirProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExcluirProduto.setEnabled(false);
        btnExcluirProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirProdutoActionPerformed(evt);
            }
        });

        btnCancelarProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancelarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons8-cancelar-50.png"))); // NOI18N
        btnCancelarProduto.setToolTipText("Cancelar");
        btnCancelarProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelarProduto.setEnabled(false);
        btnCancelarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarProdutoActionPerformed(evt);
            }
        });

        btnSairProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSairProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons8-sair-50.png"))); // NOI18N
        btnSairProduto.setToolTipText("Sair");
        btnSairProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSairProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelarProduto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnExcluirProduto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnNovoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnAlterarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnSalvarProduto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnSairProduto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNovoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAlterarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSalvarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcluirProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancelarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSairProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel1.setText("Nome do Produto*:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel2.setText("Qtd de Produtos*:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel3.setText("Unid Produto*:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel4.setText("Preço*:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel5.setText("Tipo de Produto*:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel6.setText("Categoria do Produto*:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel7.setText("Nome Evento*:");

        txtNomeProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNomeProduto.setEnabled(false);
        txtNomeProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeProdutoActionPerformed(evt);
            }
        });

        jComboBoxTipoProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBoxTipoProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "Alugado", "Conveniencia", "Compra", "Especialidade" }));
        jComboBoxTipoProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBoxTipoProduto.setEnabled(false);
        jComboBoxTipoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTipoProdutoActionPerformed(evt);
            }
        });

        jComboBoxCategoriaProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBoxCategoriaProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escolher", "Item 2", "Item 3", "Item 4" }));
        jComboBoxCategoriaProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBoxCategoriaProduto.setEnabled(false);

        txtPrecoProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtPrecoProduto.setEnabled(false);
        txtPrecoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecoProdutoActionPerformed(evt);
            }
        });

        jTableProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTableProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTableProduto.setSelectionBackground(new java.awt.Color(0, 153, 153));
        jTableProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProdutoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProduto);

        jComboBoxNomeDoEvento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBoxNomeDoEvento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "Item 2", "Item 3", "Item 4" }));
        jComboBoxNomeDoEvento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBoxNomeDoEvento.setEnabled(false);

        jComboBoxUnidProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jComboBoxUnidProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "m", "l", "kg", "m²", "a", "m³", "s" }));
        jComboBoxUnidProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBoxUnidProduto.setEnabled(false);

        btnPesquisarProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPesquisarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons8-pesquisar-25.png"))); // NOI18N
        btnPesquisarProduto.setToolTipText("Pesquisar");
        btnPesquisarProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPesquisarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarProdutoActionPerformed(evt);
            }
        });

        txtCampoPesquisaProduto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtCampoPesquisaProduto.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        txtCodProduto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtCodProduto.setEnabled(false);

        btnAdicionarCatProd.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnAdicionarCatProd.setForeground(new java.awt.Color(153, 0, 153));
        btnAdicionarCatProd.setText("+");
        btnAdicionarCatProd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdicionarCatProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarCatProdActionPerformed(evt);
            }
        });

        btnAdicionarEvento.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        btnAdicionarEvento.setForeground(new java.awt.Color(153, 0, 153));
        btnAdicionarEvento.setText("+");
        btnAdicionarEvento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdicionarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarEventoActionPerformed(evt);
            }
        });

        txtQtdProduto.setEnabled(false);
        txtQtdProduto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(txtCodProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtQtdProduto)
                                    .addComponent(txtPrecoProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxTipoProduto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxUnidProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxCategoriaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(btnAdicionarCatProd, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBoxNomeDoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(txtCampoPesquisaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPesquisarProduto)
                                        .addGap(67, 67, 67)))
                                .addComponent(btnAdicionarEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxUnidProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxTipoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxCategoriaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAdicionarCatProd)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQtdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPrecoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxNomeDoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdicionarEvento))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCampoPesquisaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCodProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPesquisarProduto)
                                .addGap(18, 18, 18)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(52, 52, 52))
        );

        setBounds(700, 270, 743, 456);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlterarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarProdutoActionPerformed
        // BOTÃO ALTERAR
        
          flag = 2;

        // ABILITANDO/DESABILITANDO OS CAMPOS
        txtNomeProduto.setEnabled(true);
        txtQtdProduto.setEnabled(true);
        jComboBoxUnidProduto.setEnabled(true);
        txtPrecoProduto.setEnabled(true);
        jComboBoxTipoProduto.setEnabled(true);
        jComboBoxCategoriaProduto.setEnabled(!true);
        jComboBoxNomeDoEvento.setEnabled(!true);
        txtCodProduto.setEnabled(false);
        txtCampoPesquisaProduto.setEnabled(false);

        // ABILITANDO/DESABILITANDO OS BOTÕES APÓS CLICAR NO BOTÃO
        btnNovoProduto.setEnabled(false);
        btnAlterarProduto.setEnabled(false);
        btnSalvarProduto.setEnabled(true);
        btnExcluirProduto.setEnabled(false);
        btnCancelarProduto.setEnabled(true);
        btnPesquisarProduto.setEnabled(false);
        btnAdicionarCatProd.setEnabled(false);
        btnAdicionarEvento.setEnabled(false);
        
        
        preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
        // preencherTabelaProduto("SELECT COD_EVENTO,NOME_EVENTO,DATA_INICIO_EVENTO,HORA_INICIO_EVENTO,DATA_FIM_EVENTO,NOME_CATEVEN FROM EVENTOS INNER JOIN CATEGORIA_EVENTOS ON EVENTOS.COD_EVENTO = CATEGORIA_EVENTOS.COD_CATEVEN ORDER BY COD_EVENTO");
        preencherComboCategoriaProduto();
        preencherComboNomeEvento();
        
        
    }//GEN-LAST:event_btnAlterarProdutoActionPerformed

    private void btnNovoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoProdutoActionPerformed
        // BOTÃO NOVO
        
        flag = 1;
        
        // LIMPANDO OS CAMPOS APÓS CLICAR
        txtNomeProduto.setText("");
        txtQtdProduto.setText("");
        jComboBoxUnidProduto.setSelectedItem("Selecionar");
        txtPrecoProduto.setText("");
        jComboBoxTipoProduto.setSelectedItem("Selecionar");
        jComboBoxCategoriaProduto.setSelectedItem(0);
        jComboBoxNomeDoEvento.setSelectedItem(0);
        txtCampoPesquisaProduto.setText("");
        txtCodProduto.setText("");
        
        // COLOCANDO FOCO NO CAMPO
        txtNomeProduto.requestFocusInWindow();
        
        // ABILITANDO OS CAMPOS 
        txtNomeProduto.setEnabled(true);
        txtQtdProduto.setEnabled(true);
        jComboBoxUnidProduto.setEnabled(true);
        txtPrecoProduto.setEnabled(true);
        jComboBoxTipoProduto.setEnabled(true);
        jComboBoxCategoriaProduto.setEnabled(true);
        jComboBoxNomeDoEvento.setEnabled(true);
        txtCampoPesquisaProduto.setEnabled(false);
        txtCodProduto.setEnabled(false);
        
        // ABILITANDO/DESABILITANDO OS BOTÕES APÓS CLICAR NO BOTÃO
        btnNovoProduto.setEnabled(false);
        btnAlterarProduto.setEnabled(false);
        btnSalvarProduto.setEnabled(true);
        btnExcluirProduto.setEnabled(false);
        btnCancelarProduto.setEnabled(true);
        btnPesquisarProduto.setEnabled(false);
        btnAdicionarCatProd.setEnabled(false);
        btnAdicionarEvento.setEnabled(false);
        
        
        preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
        // preencherTabelaProduto("SELECT COD_EVENTO,NOME_EVENTO,DATA_INICIO_EVENTO,HORA_INICIO_EVENTO,DATA_FIM_EVENTO,NOME_CATEVEN FROM EVENTOS INNER JOIN CATEGORIA_EVENTOS ON EVENTOS.COD_EVENTO = CATEGORIA_EVENTOS.COD_CATEVEN ORDER BY COD_EVENTO");
        preencherComboCategoriaProduto();
        preencherComboNomeEvento();
        
        
    }//GEN-LAST:event_btnNovoProdutoActionPerformed

    private void btnSalvarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarProdutoActionPerformed
        // BOTÃO SALVAR

        // VALIDANDO OS CAMPOS ANTES DE SALVAR
        if (txtNomeProduto.getText().isEmpty()
                || txtNomeProduto.getText().length() < 5) {

            JOptionPane.showMessageDialog(rootPane, "Informe o nome do produto!");
            txtNomeProduto.requestFocusInWindow();
            return;
        }

        if (txtQtdProduto.getText().isEmpty()
                || txtQtdProduto.getText().length() > 4
                || txtQtdProduto.getText().equalsIgnoreCase("0")
                || txtQtdProduto.getText().equalsIgnoreCase("00")
                || txtQtdProduto.getText().equalsIgnoreCase("000")
                || txtQtdProduto.getText().equalsIgnoreCase("0000") ) {

            JOptionPane.showMessageDialog(rootPane, "Informe a quantidade de produtos!");
            txtQtdProduto.requestFocusInWindow();
            return;
        }

        if ( jComboBoxUnidProduto.getSelectedItem().equals("Selecionar") ) {

            JOptionPane.showMessageDialog(rootPane, "Selecione a unidade de medida do produto!");
            jComboBoxUnidProduto.requestFocusInWindow();
            return;
        }

        if (txtPrecoProduto.getText().isEmpty()
                || txtPrecoProduto.getText().equalsIgnoreCase("0")
                || txtPrecoProduto.getText().equalsIgnoreCase("0.")
                || txtPrecoProduto.getText().equalsIgnoreCase("00")
                || txtPrecoProduto.getText().equalsIgnoreCase("0.0")
                || txtPrecoProduto.getText().equalsIgnoreCase("000")
                || txtPrecoProduto.getText().equalsIgnoreCase("0.00")
                || txtPrecoProduto.getText().equalsIgnoreCase("00.00")
                || txtPrecoProduto.getText().equalsIgnoreCase("00.0")
                || txtPrecoProduto.getText().equalsIgnoreCase("0.000")
                || txtPrecoProduto.getText().equalsIgnoreCase("000.0")
                || txtPrecoProduto.getText().equalsIgnoreCase("..")
                || txtPrecoProduto.getText().equalsIgnoreCase("...")
                || txtPrecoProduto.getText().length() > 9
                || txtPrecoProduto.getText().equalsIgnoreCase("0000") ) {

            JOptionPane.showMessageDialog(rootPane, "Informe o preço do produto!");
            txtPrecoProduto.requestFocusInWindow();
            return;
        }

        if (jComboBoxTipoProduto.getSelectedItem().equals("Selecionar") ) {

            JOptionPane.showMessageDialog(rootPane, "Selecione tipo do produto!");
            jComboBoxTipoProduto.requestFocusInWindow();
            return;
        }

     //   if (jComboBoxCategoriaProduto.getSelectedIndex() == 0) {
           // JOptionPane.showMessageDialog(rootPane, "Selecione a categoria do produto!");
          //  jComboBoxCategoriaProduto.requestFocusInWindow();
        //    return;
      //  }

        if (jComboBoxNomeDoEvento.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecione o nome do evento!");
            jComboBoxNomeDoEvento.requestFocusInWindow();
            
        } else {

            if (flag == 1) {

                // SALVANDO OS DADOS NA BASE DE DADOS
                mprodutos.setDesc_produto(txtNomeProduto.getText());
                mprodutos.setQtd_produto(Integer.parseInt(txtQtdProduto.getText()));
                mprodutos.setUnid_produto(jComboBoxUnidProduto.getSelectedItem().toString());
                mprodutos.setPreco_produto(Float.parseFloat(txtPrecoProduto.getText()));
                mprodutos.setNome_tipo(jComboBoxTipoProduto.getSelectedItem().toString());

                
                /*
                try {

                    conectaProduto.conexao();

                    conectaProduto.executaSQL("SELECT * FROM TIPO_PRODUTOS WHERE NOME_TIPO = '" + jComboBoxTipoProduto.getSelectedItem() + "'");

                    conectaProduto.rs.first();

                    // JOptionPane.showMessageDialog(rootPane, conectaEvento.rs.getInt("COD_CATEVEN"));
                    mprodutos.setCod_tipo(conectaProduto.rs.getInt("COD_TIPO"));

                    conectaProduto.desconecta();

                } catch (SQLException ex) {

                    JOptionPane.showMessageDialog(rootPane, "Erro ao selecionar o tipo do produto \n ERROR: " + ex);

                    conectaProduto.desconecta();

                }
                */
                
                
         
                try {

                    conectaProduto.conexao();

                    conectaProduto.executaSQL("SELECT * FROM CATEGORIA_PRODUTOS WHERE NOME_CATPROD = '" + jComboBoxCategoriaProduto.getSelectedItem() + "'");

                    conectaProduto.rs.first();

                    // JOptionPane.showMessageDialog(rootPane, conectaEvento.rs.getInt("COD_CATEVEN"));
                    mprodutos.setCod_cadprod(conectaProduto.rs.getInt("COD_CATPROD"));

                    conectaProduto.desconecta();

                } catch (SQLException ex) {

                    JOptionPane.showMessageDialog(rootPane, "Erro ao selecionar a categoria do produto \n ERROR: " + ex);

                    conectaProduto.desconecta();

                }
                

                try {

                    conectaProduto.conexao();

                    conectaProduto.executaSQL("SELECT * FROM EVENTOS WHERE NOME_EVENTO = '" + jComboBoxNomeDoEvento.getSelectedItem() + "'");

                    conectaProduto.rs.first();

                    // JOptionPane.showMessageDialog(rootPane, conectaEvento.rs.getInt("COD_CATEVEN"));
                    mprodutos.setCod_evento_prod(conectaProduto.rs.getInt("COD_EVENTO"));

                    conectaProduto.desconecta();

                } catch (SQLException ex) {

                    JOptionPane.showMessageDialog(rootPane, "Erro ao selecionar o nome do evento \n ERROR: " + ex);

                    conectaProduto.desconecta();

                }


                controlProdutos.salvar(mprodutos);

                // ABILITANDO/DESABILITANDO OS BOTÕES APÓS SALVAR
                btnNovoProduto.setEnabled(true);
                btnAlterarProduto.setEnabled(!true);
                btnSalvarProduto.setEnabled(false);
                btnExcluirProduto.setEnabled(!true);
                btnCancelarProduto.setEnabled(false);
                btnPesquisarProduto.setEnabled(true);
                btnAdicionarCatProd.setEnabled(true);
                btnAdicionarEvento.setEnabled(true);

                // DESABILITANDO OS CAMPOS APÓS SALVAR
                txtNomeProduto.setEnabled(false);
                txtQtdProduto.setEnabled(false);
                jComboBoxUnidProduto.setEnabled(false);
                txtPrecoProduto.setEnabled(false);
                jComboBoxTipoProduto.setEnabled(false);
                jComboBoxCategoriaProduto.setEnabled(!true);
                jComboBoxNomeDoEvento.setEnabled(false);
                txtCodProduto.setEnabled(false);

                // ABILITANDO CAMPO DE PESQUISA
                txtCampoPesquisaProduto.setEnabled(true);

                // LIMPANDO OS CAMPOS APÓS SALVAR
                txtNomeProduto.setText("");
                txtQtdProduto.setText("");
                jComboBoxUnidProduto.setSelectedItem("Selecionar");
                txtPrecoProduto.setText("");
                jComboBoxTipoProduto.setSelectedItem("Selecionar");
                // jComboBoxCategoriaProduto.setSelectedItem(0);
                // jComboBoxNomeDoEvento.setSelectedItem(0);
                txtCampoPesquisaProduto.setText("");
                txtCodProduto.setText("");

                
                preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
                // preencherTabelaProduto("SELECT COD_EVENTO,NOME_EVENTO,DATA_INICIO_EVENTO,HORA_INICIO_EVENTO,DATA_FIM_EVENTO,NOME_CATEVEN FROM EVENTOS INNER JOIN CATEGORIA_EVENTOS ON EVENTOS.COD_EVENTO = CATEGORIA_EVENTOS.COD_CATEVEN ORDER BY COD_EVENTO");

            } else {

                if (flag == 2) {

                    // DESABILITANDO O CAMPO PESQUISA
                    txtCampoPesquisaProduto.setEnabled(false);
                    btnPesquisarProduto.setEnabled(false);

                    // SETANDO OS DADOS PARA EDITAR NA BASE DE DADOS
                    mprodutos.setCod_produto(Integer.parseInt(txtCodProduto.getText()));
                    mprodutos.setDesc_produto(txtNomeProduto.getText());
                    mprodutos.setQtd_produto(Integer.parseInt(txtQtdProduto.getText()));
                    mprodutos.setUnid_produto(jComboBoxUnidProduto.getSelectedItem().toString());
                    mprodutos.setPreco_produto(Float.parseFloat(txtPrecoProduto.getText()));
                    mprodutos.setNome_tipo(jComboBoxTipoProduto.getSelectedItem().toString());
   

                    /*
                    try {

                        conectaProduto.conexao();

                        conectaProduto.executaSQL("SELECT * FROM TIPO_PRODUTOS WHERE NOME_TIPO = '" + jComboBoxTipoProduto.getSelectedItem() + "'");

                        conectaProduto.rs.first();
                        
                        JOptionPane.showMessageDialog(rootPane, conectaProduto.rs.getInt("COD_TIPO"));

                        mprodutos.setCod_tipo(conectaProduto.rs.getInt("COD_TIPO"));

                        conectaProduto.desconecta();

                    } catch (SQLException ex) {

                        JOptionPane.showMessageDialog(rootPane, "Erro ao selecionar a tipo do produto \n ERROR: " + ex);

                        conectaProduto.desconecta();

                    }
                    */
                    
                    

                    try {

                        conectaProduto.conexao();

                        conectaProduto.executaSQL("SELECT * FROM CATEGORIA_PRODUTOS WHERE NOME_CATPROD = '" + jComboBoxCategoriaProduto.getSelectedItem() + "'");

                        conectaProduto.rs.first();

                        // JOptionPane.showMessageDialog(rootPane, conectaProduto.rs.getInt("COD_CATPROD"));
                        
                        mprodutos.setCod_cadprod(conectaProduto.rs.getInt("COD_CATPROD"));

                        conectaProduto.desconecta();

                    } catch (SQLException ex) {

                        JOptionPane.showMessageDialog(rootPane, "Erro ao selecionar a categoria do produto \n ERROR: " + ex);

                        conectaProduto.desconecta();

                    }

                    try {

                        conectaProduto.conexao();

                        conectaProduto.executaSQL("SELECT * FROM EVENTOS WHERE NOME_EVENTO = '" + jComboBoxNomeDoEvento.getSelectedItem() + "'");

                        conectaProduto.rs.first();

                        // JOptionPane.showMessageDialog(rootPane, conectaProduto.rs.getInt("COD_EVENTO"));
                        
                        mprodutos.setCod_evento_prod(conectaProduto.rs.getInt("COD_EVENTO"));

                        conectaProduto.desconecta();

                    } catch (SQLException ex) {

                        JOptionPane.showMessageDialog(rootPane, "Erro ao selecionar o nome do evento \n ERROR: " + ex);

                        conectaProduto.desconecta();

                    }


                    controlProdutos.editar(mprodutos);

                    // ABILITANDO/DESABILITANDO OS BOTÕES APÓS EDITAR
                    btnNovoProduto.setEnabled(true);
                    btnAlterarProduto.setEnabled(!true);
                    btnSalvarProduto.setEnabled(false);
                    btnExcluirProduto.setEnabled(!true);
                    btnCancelarProduto.setEnabled(false);
                    btnPesquisarProduto.setEnabled(true);
                    btnAdicionarCatProd.setEnabled(true);
                    btnAdicionarEvento.setEnabled(true);

                    // ABILITANDO/DESABILITANDO OS CAMPOS APÓS EDITAR
                    txtNomeProduto.setEnabled(false);
                    txtQtdProduto.setEnabled(false);
                    jComboBoxUnidProduto.setEnabled(false);
                    txtPrecoProduto.setEnabled(false);
                    jComboBoxTipoProduto.setEnabled(false);
                    jComboBoxCategoriaProduto.setEnabled(!true);
                    jComboBoxNomeDoEvento.setEnabled(false);
                    txtCodProduto.setEnabled(false);
                    txtCampoPesquisaProduto.setEnabled(true);

                    // LIMPANDO OS CAMPOS APÓS EDITAR
                    txtNomeProduto.setText("");
                    txtQtdProduto.setText("");
                    jComboBoxUnidProduto.setSelectedItem("Selecionar");
                    txtPrecoProduto.setText("");
                    jComboBoxTipoProduto.setSelectedItem("Selecionar");
                    // jComboBoxCategoriaProduto.setSelectedItem(0);
                    // jComboBoxNomeDoEvento.setSelectedItem(0);
                    txtCampoPesquisaProduto.setText("");
                    txtCodProduto.setText("");

                    preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");

                }

            }

        }

        // preencherTabelaEvento("SELECT * FROM EVENTOS WHERE NOME_EVENTO LIKE '%" + meventos.getPesquisa() + "%'");
        // preencherTabelaProduto("SELECT COD_EVENTO,NOME_EVENTO,DATA_INICIO_EVENTO,HORA_INICIO_EVENTO,DATA_FIM_EVENTO,NOME_CATEVEN FROM EVENTOS INNER JOIN CATEGORIA_EVENTOS ON EVENTOS.COD_EVENTO = CATEGORIA_EVENTOS.COD_CATEVEN ORDER BY COD_EVENTO");

        preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
        
        
    }//GEN-LAST:event_btnSalvarProdutoActionPerformed

    private void btnExcluirProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirProdutoActionPerformed
        // BOTÃO EXCLUIR

        int resposta;

        resposta = JOptionPane.showConfirmDialog(rootPane, "Deseja realmente excluir!");

        if (resposta == JOptionPane.YES_OPTION) {

            mprodutos.setCod_produto(Integer.parseInt(txtCodProduto.getText()));

            controlProdutos.excluir(mprodutos);

            // ABILITANDO/DESABILITANDO OS BOTÕES APÓS EXLUIR
            btnNovoProduto.setEnabled(true);
            btnAlterarProduto.setEnabled(!true);
            btnSalvarProduto.setEnabled(false);
            btnExcluirProduto.setEnabled(!true);
            btnCancelarProduto.setEnabled(false);
            btnPesquisarProduto.setEnabled(true);

            // LIMPANDO OS CAMPOS APÓS EXLCUIR
            txtNomeProduto.setText("");
            txtQtdProduto.setText("");
            jComboBoxUnidProduto.setSelectedItem("Selecionar");
            txtPrecoProduto.setText("");
            jComboBoxTipoProduto.setSelectedItem("Selecionar");
            // jComboBoxCategoriaProduto.setSelectedItem(0);
            // jComboBoxNomeDoEvento.setSelectedItem(0);
            txtCampoPesquisaProduto.setText("");
            txtCodProduto.setText("");

            // ABILITANDO/DESABILITANDO OS CAMPOS APÓS EXCLUIR
            txtNomeProduto.setEnabled(false);
            txtQtdProduto.setEnabled(false);
            jComboBoxUnidProduto.setEnabled(false);
            txtPrecoProduto.setEnabled(false);
            jComboBoxTipoProduto.setEnabled(false);
            jComboBoxCategoriaProduto.setEnabled(!true);
            jComboBoxNomeDoEvento.setEnabled(false);
            txtCodProduto.setEnabled(false);
            txtCampoPesquisaProduto.setEnabled(true);

            
            preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
            // preencherTabelaProduto("SELECT COD_EVENTO,NOME_EVENTO,DATA_INICIO_EVENTO,HORA_INICIO_EVENTO,DATA_FIM_EVENTO,NOME_CATEVEN FROM EVENTOS INNER JOIN CATEGORIA_EVENTOS ON EVENTOS.COD_EVENTO = CATEGORIA_EVENTOS.COD_CATEVEN ORDER BY COD_EVENTO");

        } else {

            // ABILITANDO/DESABILITANDO OS BOTÕES APÓS CLICAR EM "NÃO" EXLUIR
            btnNovoProduto.setEnabled(true);
            btnAlterarProduto.setEnabled(!true);
            btnSalvarProduto.setEnabled(false);
            btnExcluirProduto.setEnabled(!true);
            btnCancelarProduto.setEnabled(false);
            btnPesquisarProduto.setEnabled(true);

            // DESABILITANDO OS CAMPOS APÓS CLICAR EM "NÃO" EXCLUIR
            txtNomeProduto.setEnabled(false);
            txtQtdProduto.setEnabled(false);
            jComboBoxUnidProduto.setEnabled(false);
            txtPrecoProduto.setEnabled(false);
            jComboBoxTipoProduto.setEnabled(false);
            jComboBoxCategoriaProduto.setEnabled(!true);
            jComboBoxNomeDoEvento.setEnabled(false);
            txtCodProduto.setEnabled(false);
            txtCampoPesquisaProduto.setEnabled(true);

            // LIMPANDO OS CAMPOS APÓS CLICAR EM "NÃO" EXLCUIR
            txtNomeProduto.setText("");
            txtQtdProduto.setText("");
            jComboBoxUnidProduto.setSelectedItem("Selecionar");
            txtPrecoProduto.setText("");
            jComboBoxTipoProduto.setSelectedItem("Selecionar");
            // jComboBoxCategoriaProduto.setSelectedItem(0);
            // jComboBoxNomeDoEvento.setSelectedItem(0);
            txtCampoPesquisaProduto.setText("");
            txtCodProduto.setText("");
            

            preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");

        }

        // preencherTabelaProduto("SELECT * FROM EVENTOS WHERE NOME_EVENTO LIKE '%" + meventos.getPesquisa() + "%'");
        // preencherTabelaProduto("SELECT COD_EVENTO,NOME_EVENTO,DATA_INICIO_EVENTO,HORA_INICIO_EVENTO,DATA_FIM_EVENTO,NOME_CATEVEN FROM EVENTOS INNER JOIN CATEGORIA_EVENTOS ON EVENTOS.COD_EVENTO = CATEGORIA_EVENTOS.COD_CATEVEN ORDER BY COD_EVENTO");

        preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");

        
        
    }//GEN-LAST:event_btnExcluirProdutoActionPerformed

    private void btnCancelarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarProdutoActionPerformed
        // BOTAO CANCELAR

        // ABILITANDO/DESABILITANDO OS BOTÕES APÓS CANCELAR
        btnNovoProduto.setEnabled(true);
        btnAlterarProduto.setEnabled(!true);
        btnSalvarProduto.setEnabled(false);
        btnExcluirProduto.setEnabled(!true);
        btnCancelarProduto.setEnabled(false);
        btnPesquisarProduto.setEnabled(true);
        btnAdicionarCatProd.setEnabled(true);
        btnAdicionarEvento.setEnabled(true);

        // DESABILITANDO OS CAMPOS APÓS CANCELAR
        txtNomeProduto.setEnabled(false);
        txtQtdProduto.setEnabled(false);
        jComboBoxUnidProduto.setEnabled(false);
        txtPrecoProduto.setEnabled(false);
        jComboBoxTipoProduto.setEnabled(false);
        jComboBoxCategoriaProduto.setEnabled(!true);
        jComboBoxNomeDoEvento.setEnabled(false);
        txtCodProduto.setEnabled(false);

        txtCampoPesquisaProduto.setEnabled(true);

        // LIMPANDO OS CAMPOS APÓS CLICAR
        txtCodProduto.setText("");
        txtNomeProduto.setText("");
        txtQtdProduto.setText("");
        jComboBoxUnidProduto.setSelectedItem("Selecionar");
        txtPrecoProduto.setText("");
        jComboBoxTipoProduto.setSelectedItem("Selecionar");
        // jComboBoxCategoriaProduto.setSelectedItem(0);
        // jComboBoxNomeDoEvento.setSelectedItem(0);
        txtCampoPesquisaProduto.setText("");

        
        preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
        preencherComboCategoriaProduto();
        preencherComboNomeEvento();
   
        
        
    }//GEN-LAST:event_btnCancelarProdutoActionPerformed

    private void btnPesquisarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarProdutoActionPerformed
        // BOTÃO PESQUISAR
  
        if (txtCampoPesquisaProduto.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Informe o nome para pesquisar!");
            txtCampoPesquisaProduto.requestFocusInWindow();

        } else if (!txtCampoPesquisaProduto.getText().isEmpty()) {

            // ABILITANDO/DESABILITANDO OS BOTÕES ANTES DE PESQUISAR
            btnNovoProduto.setEnabled(true);
            btnAlterarProduto.setEnabled(!true);
            btnExcluirProduto.setEnabled(!true);
            btnCancelarProduto.setEnabled(true);

            mprodutos.setPesquisa(txtCampoPesquisaProduto.getText());

            ModelProdutos modelProdutos = controlProdutos.buscarProdutos(mprodutos);

            preencherTabelaProduto("SELECT * FROM PRODUTOS WHERE DESC_PROD LIKE '%" + mprodutos.getPesquisa() + "%'");
            
            txtCampoPesquisaProduto.setText("");

            // ABILITANDO/DESABILITANDO OS BOTÕES APÓS PESQUISAR
            btnNovoProduto.setEnabled(true);
            btnAlterarProduto.setEnabled(!true);
            btnSalvarProduto.setEnabled(false);
            btnExcluirProduto.setEnabled(!true);
            btnCancelarProduto.setEnabled(!false);
            btnPesquisarProduto.setEnabled(true);

            // DESABILITANDO OS CAMPOS APÓS PESQUISAR
            txtNomeProduto.setEnabled(false);
            txtQtdProduto.setEnabled(false);
            jComboBoxUnidProduto.setEnabled(false);
            txtPrecoProduto.setEnabled(false);
            jComboBoxTipoProduto.setEnabled(false);
            jComboBoxCategoriaProduto.setEnabled(!true);
            jComboBoxNomeDoEvento.setEnabled(false);
            txtCodProduto.setEnabled(false);
            txtCampoPesquisaProduto.setEnabled(true);

            // LIMPANDO OS CAMPOS APÓS PESQUISAR
            txtCodProduto.setText("");
            txtNomeProduto.setText("");
            txtQtdProduto.setText("");
            jComboBoxUnidProduto.setSelectedItem("Selecionar");
            txtPrecoProduto.setText("");
            jComboBoxTipoProduto.setSelectedItem("selecionar");
            // jComboBoxCategoriaProduto.setSelectedItem(0);
            // jComboBoxNomeDoEvento.setSelectedItem(0);
            txtCampoPesquisaProduto.setText("");


            // preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
            
        } else if (mprodutos.getPesquisa().equals("")) {

           preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
           
        }

        //preencherTabelaEvento("SELECT * FROM EVENTOS WHERE NOME_EVENTO LIKE '%" + meventos.getPesquisa() + "%'");
        //preencherTabelaEvento("SELECT * FROM EVENTOS ORDER BY COD_EVENTO");

        
        
    }//GEN-LAST:event_btnPesquisarProdutoActionPerformed

    private void btnSairProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairProdutoActionPerformed
        // BOTÃO SAIR
        
        // ABILITANDO/DESABILITANDO OS BOTÕES APÓS SAIR
        btnNovoProduto.setEnabled(true);
        btnAlterarProduto.setEnabled(!true);
        btnSalvarProduto.setEnabled(false);
        btnExcluirProduto.setEnabled(!true);
        btnCancelarProduto.setEnabled(false);
        btnPesquisarProduto.setEnabled(true);
        btnAdicionarCatProd.setEnabled(true);
        btnAdicionarEvento.setEnabled(true);

        // DESABILITANDO OS CAMPOS APÓS SAIR
        txtNomeProduto.setEnabled(false);
        txtQtdProduto.setEnabled(false);
        jComboBoxUnidProduto.setEnabled(false);
        txtPrecoProduto.setEnabled(false);
        jComboBoxTipoProduto.setEnabled(false);
        jComboBoxCategoriaProduto.setEnabled(!true);
        jComboBoxNomeDoEvento.setEnabled(false);
        txtCodProduto.setEnabled(false);

        txtCampoPesquisaProduto.setEnabled(true);

        // LIMPANDO OS CAMPOS APÓS CLICAR
        txtCodProduto.setText("");
        txtNomeProduto.setText("");
        txtQtdProduto.setText("");
        jComboBoxUnidProduto.setSelectedItem("Selecionar");
        txtPrecoProduto.setText("");
        jComboBoxTipoProduto.setSelectedItem("Selecionar");
        // jComboBoxCategoriaProduto.setSelectedItem(0);
        // jComboBoxNomeDoEvento.setSelectedItem(0);
        txtCampoPesquisaProduto.setText("");

        
        dispose();
        
        preencherTabelaProduto("SELECT * FROM PRODUTOS ORDER BY COD_PROD");
        
        
        // dispose(); AO FECHAR A JANELA QUANDO A TABELA ESTIVER VAZIA DA ERRO, POR ISSO NÃO FECHAR
    }//GEN-LAST:event_btnSairProdutoActionPerformed

    private void txtNomeProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeProdutoActionPerformed

    private void txtPrecoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecoProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecoProdutoActionPerformed

    private void jTableProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProdutoMouseClicked
        // EVENTO MOUSE CLICKED
        
        String nome_produto = "" + jTableProduto.getValueAt(jTableProduto.getSelectedRow(), 1);

        // JOptionPane.showMessageDialog(rootPane, nome_produto);
        
        // ABILITANDO/DESABILITANDO OS CAMPOS ANTES DE PESQUISAR
        btnNovoProduto.setEnabled(true);
        btnAlterarProduto.setEnabled(!true);
        btnExcluirProduto.setEnabled(!true);
        btnCancelarProduto.setEnabled(true);

        mprodutos.setPesquisa(txtCampoPesquisaProduto.getText());

        // ABILITANDO/DESABILITANDO OS BOTÕES APÓS SELECIONAR ITEM NA TABELA
        btnNovoProduto.setEnabled(true);
        btnAlterarProduto.setEnabled(true);
        btnSalvarProduto.setEnabled(false);
        btnExcluirProduto.setEnabled(true);
        btnCancelarProduto.setEnabled(!false);
        btnPesquisarProduto.setEnabled(true);
        btnAdicionarCatProd.setEnabled(true);
        btnAdicionarEvento.setEnabled(true);

        // DESABILITANDO OS CAMPOS APÓS SELECIONAR ITEM NA TABELA
        txtNomeProduto.setEnabled(false);
        txtQtdProduto.setEnabled(false);
        jComboBoxUnidProduto.setEnabled(false);
        txtPrecoProduto.setEnabled(false);
        jComboBoxTipoProduto.setEnabled(false);
        jComboBoxCategoriaProduto.setEnabled(!true);
        jComboBoxNomeDoEvento.setEnabled(false);
        txtCodProduto.setEnabled(false);
         
        txtCampoPesquisaProduto.setEnabled(true);
        

        // conectaProduto.conexao();

        // conectaProduto.executaSQL("SELECT * FROM PRODUTOS WHERE DESC_PROD = '" + nome_produto + "'");


        try {
 
            conectaProduto.conexao();

            conectaProduto.executaSQL("SELECT * FROM PRODUTOS WHERE DESC_PROD = '" + nome_produto + "'");
            
            conectaProduto.rs.first();
    

            txtCodProduto.setText(String.valueOf(conectaProduto.rs.getInt("COD_PROD")));
            txtNomeProduto.setText(conectaProduto.rs.getString("DESC_PROD"));
            txtQtdProduto.setText(String.valueOf(conectaProduto.rs.getInt("QTD_PROD")));
            jComboBoxUnidProduto.setSelectedItem(conectaProduto.rs.getString("UNID_PROD"));
            txtPrecoProduto.setText(String.valueOf(conectaProduto.rs.getFloat("PRECO_PROD")));
            jComboBoxTipoProduto.setSelectedItem(conectaProduto.rs.getString("NOME_TIPO"));

            
            
            try {

                conectaCategoriaProdutos.conexao();

                // conectaCategoriaProdutos.executaSQL("SELECT produtos.desc_prod, CATEGORIA_PRODUTOS.nome_CATPROD FROM produtos inner join CATEGORIA_PRODUTOS on CATEGORIA_PRODUTOS.COD_CATPROD =  produtos." + conectaProduto.rs.getInt("COD_PROD"));
                conectaCategoriaProdutos.executaSQL("SELECT * FROM CATEGORIA_PRODUTOS WHERE COD_CATPROD ='"+conectaProduto.rs.getInt("COD_CATPROD")+"'");

                conectaCategoriaProdutos.rs.first();

                // JOptionPane.showMessageDialog(rootPane, conectaProduto.rs.getInt("COD_CATPROD"));
                jComboBoxCategoriaProduto.setSelectedItem(conectaCategoriaProdutos.rs.getString("NOME_CATPROD"));

                conectaCategoriaProdutos.desconecta();

            } catch (SQLException ex) {

                // JOptionPane.showMessageDialog(rootPane, "Erro ao selecionar a categoria do produto \n ERROR: " + ex);

                conectaCategoriaProdutos.desconecta();

            }
            
            
            try {

                conectaEventos.conexao();

                // conectaEventos.executaSQL("SELECT produtos.desc_prod, eventos.nome_evento FROM produtos inner join eventos on eventos.cod_evento =  produtos."+conectaProduto.rs.getInt("COD_PROD"));
                conectaEventos.executaSQL("SELECT * FROM EVENTOS WHERE COD_EVENTO ='"+conectaProduto.rs.getInt("COD_EVENTO")+"'");  
                
                conectaEventos.rs.first();

                // JOptionPane.showMessageDialog(rootPane, conectaProduto.rs.getInt("COD_EVENTO"));
                jComboBoxNomeDoEvento.setSelectedItem(conectaEventos.rs.getString("NOME_EVENTO"));

                conectaEventos.desconecta();

            } catch (SQLException ex) {

                // JOptionPane.showMessageDialog(rootPane, "Erro ao selecionar o nome do evento \n ERROR: " + ex);

                conectaEventos.desconecta();

            }



            /*
            //conectaTipo.conexao();
            conectaProduto.executaSQL("SELECT * FROM TIPO_PRODUTOS WHERE COD_TIPO ='"+conectaProduto.rs.getInt("COD_PROD")+"'");
            conectaProduto.rs.first();
            jComboBoxTipoProduto.setSelectedItem(conectaProduto.rs.getString("NOME_TIPO"));
            //conectaTipo.desconecta();
            */     
            
            /*
            conectaCategoriaProdutos.conexao();
            conectaCategoriaProdutos.executaSQL("SELECT * FROM CATEGORIA_PRODUTOS WHERE COD_CATPROD ='"+conectaProduto.rs.getInt("COD_PROD")+"'");
            conectaCategoriaProdutos.rs.first();
            nomeCategoria = conectaCategoriaProdutos.rs.getString("NOME_CATPROD");
            jComboBoxCategoriaProduto.setSelectedItem(conectaCategoriaProdutos.rs.getString("NOME_CATPROD"));
            JOptionPane.showMessageDialog(rootPane, nomeCategoria + " : " + nomeEvento);
            conectaCategoriaProdutos.desconecta();
            
            
            conectaEventos.conexao();
            conectaEventos.executaSQL("SELECT * FROM EVENTOS WHERE COD_EVENTO ='"+conectaProduto.rs.getInt("COD_PROD")+"'");
            conectaEventos.rs.first();
            // nomeEvento = conectaEventos.rs.getString("NOME_EVENTO");
            jComboBoxNomeDoEvento.setSelectedItem(conectaEventos.rs.getString("NOME_EVENTO"));
            JOptionPane.showMessageDialog(rootPane, nomeEvento );
            conectaProduto.desconecta();
            */
            
            
            
            conectaProduto.desconecta();

        } catch (SQLException ex) {
            
            JOptionPane.showMessageDialog(rootPane, "Erro ao seleciona os dados!");
            // JOptionPane.showMessageDialog(rootPane, "Erro ao seleciona os dados! \n ERRO: " + ex);
            
            conectaProduto.desconecta();
 
        }

         
        
    }//GEN-LAST:event_jTableProdutoMouseClicked

    private void jComboBoxTipoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTipoProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTipoProdutoActionPerformed

    private void btnAdicionarCatProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarCatProdActionPerformed
        // BOTÂO ADICIONAR CATEGORIA DE PRODUTO
        
        
        if (frmCatProd == null) {

            frmCatProd = new FrmCategoriaProdutos();

        }

        frmCatProd.setVisible(true);
        
        dispose();
        
    }//GEN-LAST:event_btnAdicionarCatProdActionPerformed

    private void btnAdicionarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarEventoActionPerformed
        // BOTÂO ADICIONAR EVENTO

        if (frmEvent == null) {

            frmEvent = new FrmEventos();

        }

        frmEvent.setVisible(true);
        
        dispose();
        
        
        
    }//GEN-LAST:event_btnAdicionarEventoActionPerformed

    
    
    /*
    public void preencherComboTipoProduto() {

        conectaTipo.conexao();

        conectaTipo.executaSQL("SELECT * FROM TIPO_PRODUTOS ORDER BY NOME_TIPO");

        // REMOVE TODOS OS ITENS DA COMOBOX QUE VEM POR PADRAO PARA PODER ARMAZENAR OS ITENS QUE VEM DA BASE DE DADOS
        jComboBoxTipoProduto.removeAllItems();

        try {

            conectaTipo.rs.first();

            do {

                jComboBoxTipoProduto.addItem(conectaTipo.rs.getString("NOME_TIPO"));

            } while (conectaTipo.rs.next());

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(rootPane, "Erro ao preencher tipos de produto \n ERROR: " + ex);

        }

        conectaTipo.desconecta();

    }
    */
    
    
    
    public void preencherComboCategoriaProduto() {

        conectaCategoriaProdutos.conexao();

        conectaCategoriaProdutos.executaSQL("SELECT * FROM CATEGORIA_PRODUTOS ORDER BY NOME_CATPROD");

        // REMOVE TODOS OS ITENS DA COMOBOX QUE VEM POR PADRAO PARA PODER ARMAZENAR OS ITENS QUE VEM DA BASE DE DADOS
        jComboBoxCategoriaProduto.removeAllItems();

        try {

            conectaCategoriaProdutos.rs.first();

            do {

                jComboBoxCategoriaProduto.addItem(conectaCategoriaProdutos.rs.getString("NOME_CATPROD"));

            } while (conectaCategoriaProdutos.rs.next());

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(rootPane, "Erro ao preencher categorias do produto");
            // JOptionPane.showMessageDialog(rootPane, "Erro ao preencher categorias do produto \n ERROR: " + ex);
            
            conectaCategoriaProdutos.desconecta();

        }

        conectaCategoriaProdutos.desconecta();

    }
    
    
    public void preencherComboNomeEvento() {

        conectaEventos.conexao();

        conectaEventos.executaSQL("SELECT * FROM EVENTOS ORDER BY NOME_EVENTO");

        // REMOVE TODOS OS ITENS DA COMOBOX QUE VEM POR PADRAO PARA PODER ARMAZENAR OS ITENS QUE VEM DA BASE DE DADOS
        jComboBoxNomeDoEvento.removeAllItems();

        try {

            conectaEventos.rs.first();

            do {

                jComboBoxNomeDoEvento.addItem(conectaEventos.rs.getString("NOME_EVENTO"));

            } while (conectaEventos.rs.next());

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(rootPane, "Erro ao preencher nome dos evento");
            // JOptionPane.showMessageDialog(rootPane, "Erro ao preencher nome dos evento \n ERROR: " + ex);
            
            conectaEventos.desconecta();

        }

        conectaEventos.desconecta();

    }
    
      
    public void preencherTabelaProduto(String SQL) {

        ArrayList dados = new ArrayList();

        String[] Colunas = new String[]{"Cod", "Desc do Produto", "Qtd", "Unid M", "Preço", "Tipo", "Categoria", "Evento" };

        conectaProduto.conexao();

        conectaProduto.executaSQL(SQL);
        
        
        /* 
        conectaTipo.conexao();
        conectaTipo.executaSQL(SQL);
         */


        try {
            

            /*
            conectaTipo.executaSQL("SELECT * FROM TIPO_PRODUTOS WHERE COD_TIPO ='" + conectaProduto.rs.getInt("COD_PROD") + "'");
            conectaTipo.rs.first();
            jComboBoxTipoProduto.setSelectedItem(conectaTipo.rs.getString("NOME_TIPO"));
            */
            
            
            conectaProduto.rs.first();

            do {

                dados.add(new Object[]{conectaProduto.rs.getInt("COD_PROD"),
                    conectaProduto.rs.getString("DESC_PROD"),
                    conectaProduto.rs.getInt("QTD_PROD"),
                    conectaProduto.rs.getString("UNID_PROD"),
                    conectaProduto.rs.getFloat("PRECO_PROD"),
                    conectaProduto.rs.getString("NOME_TIPO"),
                    conectaProduto.rs.getInt("COD_CATPROD"),
                    conectaProduto.rs.getInt("COD_EVENTO") });

            } while (conectaProduto.rs.next());

        } catch (SQLException e) {

            // JOptionPane.showMessageDialog(rootPane, "Erro ao preencher lista dos produtos!");
            // JOptionPane.showMessageDialog(rootPane, "Erro ao preencher lista de produtos! \n ERRO: " + e);
            
            conectaProduto.desconecta();
            
        }

        ModelTabela mtabelaProduto = new ModelTabela(dados, Colunas);

        jTableProduto.setModel(mtabelaProduto);
        jTableProduto.getColumnModel().getColumn(0).setPreferredWidth(51);
        jTableProduto.getColumnModel().getColumn(0).setResizable(false);
        jTableProduto.getColumnModel().getColumn(1).setPreferredWidth(116);
        jTableProduto.getColumnModel().getColumn(1).setResizable(false);
        jTableProduto.getColumnModel().getColumn(2).setPreferredWidth(60);
        jTableProduto.getColumnModel().getColumn(2).setResizable(false);
        jTableProduto.getColumnModel().getColumn(3).setPreferredWidth(60);
        jTableProduto.getColumnModel().getColumn(3).setResizable(false);
        jTableProduto.getColumnModel().getColumn(4).setPreferredWidth(61);
        jTableProduto.getColumnModel().getColumn(4).setResizable(false);
        jTableProduto.getColumnModel().getColumn(5).setPreferredWidth(90);
        jTableProduto.getColumnModel().getColumn(5).setResizable(false);
        jTableProduto.getColumnModel().getColumn(6).setPreferredWidth(70);
        jTableProduto.getColumnModel().getColumn(6).setResizable(false);
        jTableProduto.getColumnModel().getColumn(7).setPreferredWidth(115);
        jTableProduto.getColumnModel().getColumn(7).setResizable(false);
        jTableProduto.getTableHeader().setReorderingAllowed(false);
        jTableProduto.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTableProduto.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // conectaProduto.desconecta();

    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FrmProdutos().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarCatProd;
    private javax.swing.JButton btnAdicionarEvento;
    private javax.swing.JButton btnAlterarProduto;
    private javax.swing.JButton btnCancelarProduto;
    private javax.swing.JButton btnExcluirProduto;
    private javax.swing.JButton btnNovoProduto;
    private javax.swing.JButton btnPesquisarProduto;
    private javax.swing.JButton btnSairProduto;
    private javax.swing.JButton btnSalvarProduto;
    private javax.swing.JComboBox<String> jComboBoxCategoriaProduto;
    private javax.swing.JComboBox<String> jComboBoxNomeDoEvento;
    private javax.swing.JComboBox<String> jComboBoxTipoProduto;
    private javax.swing.JComboBox<String> jComboBoxUnidProduto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProduto;
    private javax.swing.JTextField txtCampoPesquisaProduto;
    private javax.swing.JTextField txtCodProduto;
    private javax.swing.JTextField txtNomeProduto;
    private javax.swing.JTextField txtPrecoProduto;
    private javax.swing.JFormattedTextField txtQtdProduto;
    // End of variables declaration//GEN-END:variables
}
